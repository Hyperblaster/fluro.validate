angular.module("fluro.validate",[]),angular.module("fluro.validate").service("FluroValidate",function(){var controller={};return controller.validate=function(entry,field){if(field.minimum>0&&!entry)return!1;if(_.isArray(entry)){var array=entry;if(1==field.minimum&&1==field.maximum&&"array"!=field.type)return!1;if(array.length<field.minimum)return!1;if(field.maximum&&array.length>field.maximum)return!1;var invalidEntries=_.filter(array,function(obj){var allowed=!0;field.allowedValues&&field.allowedValues.length&&(allowed=_.includes(field.allowedValues,obj));var correctType=controller.validateType(obj,field.type,field.directive);return!allowed||!correctType});if(invalidEntries.length)return!1}else{if(field.minimum>1)return!1;if(field.minimum>0){var correctType=controller.validateType(entry,field.type,field.directive);if(!correctType)return!1}if(entry&&field.allowedValues&&field.allowedValues.length){var allowed=_.includes(field.allowedValues,entry);if(!allowed)return!1}}return!0},controller.validateType=function(field,fieldType,directive){switch(fieldType.toLowerCase()){case"reference":return console.log("CHECK REFERENCE",field,fieldType,directive),_.isString(field)?validator.isMongoId(field):validator.isMongoId(field._id);case"email":return validator.isEmail(field);case"url":return validator.isURL(field);case"array":return _.isArray(field);case"decimal":case"float":case"number":var numberised=Number(field),isActual=_.isFinite(numberised)&&!_.isNaN(numberised);return isActual;case"integer":return validator.isInt(field);case"string":return _.isString(field);case"object":return _.isObject(field);case"date":return _.isDate(field);case"boolean":return _.isBoolean(field);case"void":return!0}},controller});